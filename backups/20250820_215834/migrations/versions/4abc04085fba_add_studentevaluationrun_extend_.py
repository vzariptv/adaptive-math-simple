"""Add StudentEvaluationRun; extend StudentEvaluationLog for thick log

Revision ID: 4abc04085fba
Revises: 673f29da221c
Create Date: 2025-08-19 13:02:19.962499

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '4abc04085fba'
down_revision = '673f29da221c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # На случай частичного прогона миграции (SQLite, повторный запуск)
    op.execute("DROP TABLE IF EXISTS student_evaluation_runs")
    op.create_table('student_evaluation_runs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('triggered_by', sa.Integer(), nullable=True),
    sa.Column('period_start', sa.Date(), nullable=False),
    sa.Column('period_end', sa.Date(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['triggered_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('student_evaluation_runs', schema=None) as batch_op:
        batch_op.create_index('ix_eval_run_created_at', ['created_at'], unique=False)

    # NOTE: Skipping changes to math_tasks to avoid SQLite FK issues.

    with op.batch_alter_table('student_evaluation_logs', schema=None) as batch_op:
        batch_op.add_column(sa.Column('evaluation_run_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('time_score', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('progress_score', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('motivation_score', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('level_before', sa.String(length=10), nullable=True))
        batch_op.add_column(sa.Column('level_after', sa.String(length=10), nullable=True))
        batch_op.add_column(sa.Column('tasks_total', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('tasks_solved', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('attempts_total', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('a1', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('a2', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('a3', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('calc_trace', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('decided_at', sa.DateTime(), nullable=True))
        batch_op.create_index('ix_eval_log_user_topic_decided', ['user_id', 'topic_id', 'decided_at'], unique=False)
        batch_op.create_unique_constraint('uq_eval_run_user_topic', ['evaluation_run_id', 'user_id', 'topic_id'])
        # Ensure FK to users with ondelete=CASCADE (no drop needed on SQLite)
        batch_op.create_foreign_key('fk_eval_logs_user_id', 'users', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key('fk_eval_logs_run_id', 'student_evaluation_runs', ['evaluation_run_id'], ['id'])

    with op.batch_alter_table('student_topic_progress', schema=None) as batch_op:
        batch_op.create_foreign_key('fk_topic_progress_user_id', 'users', ['user_id'], ['id'], ondelete='CASCADE')

    with op.batch_alter_table('task_attempts', schema=None) as batch_op:
        batch_op.create_index('ix_attempts_task_created', ['task_id', 'created_at'], unique=False)
        batch_op.create_index('ix_attempts_user_created', ['user_id', 'created_at'], unique=False)
        batch_op.create_foreign_key('fk_attempts_task_id', 'math_tasks', ['task_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key('fk_attempts_user_id', 'users', ['user_id'], ['id'], ondelete='CASCADE')

    with op.batch_alter_table('topic_level_configs', schema=None) as batch_op:
        batch_op.create_foreign_key('fk_level_configs_topic_id', 'topics', ['topic_id'], ['id'], ondelete='CASCADE')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('topic_level_configs', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'topics', ['topic_id'], ['id'])

    with op.batch_alter_table('task_attempts', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])
        batch_op.create_foreign_key(None, 'math_tasks', ['task_id'], ['id'])
        batch_op.drop_index('ix_attempts_user_created')
        batch_op.drop_index('ix_attempts_task_created')

    with op.batch_alter_table('student_topic_progress', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])

    with op.batch_alter_table('student_evaluation_logs', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])
        batch_op.drop_constraint('uq_eval_run_user_topic', type_='unique')
        batch_op.drop_index('ix_eval_log_user_topic_decided')
        batch_op.drop_column('decided_at')
        batch_op.drop_column('calc_trace')
        batch_op.drop_column('a3')
        batch_op.drop_column('a2')
        batch_op.drop_column('a1')
        batch_op.drop_column('attempts_total')
        batch_op.drop_column('tasks_solved')
        batch_op.drop_column('tasks_total')
        batch_op.drop_column('level_after')
        batch_op.drop_column('level_before')
        batch_op.drop_column('motivation_score')
        batch_op.drop_column('progress_score')
        batch_op.drop_column('time_score')
        batch_op.drop_column('evaluation_run_id')

    # No changes to math_tasks in downgrade for this migration.

    with op.batch_alter_table('student_evaluation_runs', schema=None) as batch_op:
        batch_op.drop_index('ix_eval_run_created_at')

    op.drop_table('student_evaluation_runs')
    # ### end Alembic commands ###
